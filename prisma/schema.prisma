// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // url          = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // relationMode = "prisma"
}

model User {
  id               String             @id @default(uuid())
  phoneNumber      String             @unique
  password         String
  email            String?            @unique
  role             Role
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  isDisabled       Boolean            @default(false)
  posts            Post[]
  gallery          Gallery[]
  grandAdmin       GrandAdmin?
  superAdmin       SuperAdmin?
  admin            Admin?
  member           Member?
  project          Project[]
  membership       Membership[]
  villages         Village[]
  postOffices      PostOffice[]
  thana            Thana[]
  districts        District[]
  divisions        Division[]
  countries        Country[]
  presentAddress   PresentAddress[]
  permanentAddress PermanentAddress[]

  @@map(name: "users")
}

model Member {
  id                 String           @id @default(uuid())
  firstName          String
  lastName           String
  phoneNumber        String           @unique
  email              String?          @unique
  imageUrl           String
  gender             Gender
  dateOfBirth        DateTime
  education          String?
  bloodGroup         String?
  nidNumber          String           @unique
  occupation         String?
  referenceId        String?
  spouseName         String?
  fathersName        String?
  mothersName        String?
  membershipId       String
  presentAddressId   String           @unique
  permanentAddressId String           @unique
  presentAddress     PresentAddress   @relation(fields: [presentAddressId], references: [id], onDelete: Cascade)
  permanentAddress   PermanentAddress @relation(fields: [permanentAddressId], references: [id], onDelete: Cascade)

  registrationAddress   RegisteringAddress
  infoVerificationPhoto String?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  userId                String             @unique
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription          Subscription[]

  @@map(name: "member")
}

model GrandAdmin {
  id                 String            @id @default(uuid())
  firstName          String
  lastName           String
  phoneNumber        String            @unique
  email              String?           @unique
  imageUrl           String
  gender             Gender
  dateOfBirth        DateTime
  education          String?
  bloodGroup         String?
  nidNumber          String?
  occupation         String?
  spouseName         String?
  fathersName        String?
  mothersName        String?
  presentAddressId   String?
  permanentAddressId String?
  presentAddress     PresentAddress?   @relation(fields: [presentAddressId], references: [id])
  permanentAddress   PermanentAddress? @relation(fields: [permanentAddressId], references: [id])

  infoVerificationPhoto String?
  userId                String   @unique
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "grand_admin")
}

model SuperAdmin {
  id                 String    @id @default(uuid())
  firstName          String
  lastName           String
  phoneNumber        String    @unique
  email              String?   @unique
  imageUrl           String?
  gender             Gender    @default(male)
  dateOfBirth        DateTime?
  education          String?
  bloodGroup         String?
  nidNumber          String?
  occupation         String?
  referenceId        String?
  spouseName         String?
  fathersName        String?
  mothersName        String?
  authorizationScope String
  authorizationArea  String
  // authorizationAreaId String

  presentAddressId   String           @unique
  permanentAddressId String           @unique
  presentAddress     PresentAddress   @relation(fields: [presentAddressId], references: [id], onDelete: Cascade)
  permanentAddress   PermanentAddress @relation(fields: [permanentAddressId], references: [id], onDelete: Cascade)

  infoVerificationPhoto String?
  userId                String   @unique
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "super_admin")
}

model Admin {
  id                 String    @id @default(uuid())
  firstName          String
  lastName           String
  phoneNumber        String    @unique
  email              String?   @unique
  imageUrl           String?
  gender             Gender    @default(male)
  dateOfBirth        DateTime?
  education          String?
  bloodGroup         String?
  nidNumber          String?
  occupation         String?
  referenceId        String?
  spouseName         String?
  fathersName        String?
  mothersName        String?
  authorizationScope String
  authorizationArea  String
  // authorizationAreaId String

  presentAddressId   String           @unique
  permanentAddressId String           @unique
  presentAddress     PresentAddress   @relation(fields: [presentAddressId], references: [id], onDelete: Cascade)
  permanentAddress   PermanentAddress @relation(fields: [permanentAddressId], references: [id], onDelete: Cascade)

  infoVerificationPhoto String?
  userId                String   @unique
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "admin")
}

model PresentAddress {
  id           String @id @default(uuid())
  countryId    String
  divisionId   String
  districtId   String
  thanaId      String
  postOfficeId String
  villageId    String
  userId       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  country    Country    @relation(fields: [countryId], references: [id], onDelete: Cascade)
  division   Division   @relation(fields: [divisionId], references: [id], onDelete: Cascade)
  district   District   @relation(fields: [districtId], references: [id], onDelete: Cascade)
  thana      Thana      @relation(fields: [thanaId], references: [id], onDelete: Cascade)
  postOffice PostOffice @relation(fields: [postOfficeId], references: [id], onDelete: Cascade)
  village    Village    @relation(fields: [villageId], references: [id], onDelete: Cascade)
  member     Member?

  // grandAdmin GrandAdmin?
  // superAdmin SuperAdmin?
  // admin      Admin?
  // GrandAdmin GrandAdmin?
  superAdmin SuperAdmin?
  admin      Admin?
  grandAdmin GrandAdmin[]

  @@map("present_address")
}

model PermanentAddress {
  id           String @id @default(uuid())
  countryId    String
  divisionId   String
  districtId   String
  thanaId      String
  postOfficeId String
  villageId    String
  userId       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  country    Country      @relation(fields: [countryId], references: [id], onDelete: Cascade)
  division   Division     @relation(fields: [divisionId], references: [id], onDelete: Cascade)
  district   District     @relation(fields: [districtId], references: [id], onDelete: Cascade)
  thana      Thana        @relation(fields: [thanaId], references: [id], onDelete: Cascade)
  postOffice PostOffice   @relation(fields: [postOfficeId], references: [id], onDelete: Cascade)
  village    Village      @relation(fields: [villageId], references: [id], onDelete: Cascade)
  member     Member?
  // grandAdmin GrandAdmin?
  // superAdmin SuperAdmin?
  // admin      Admin?
  // GrandAdmin GrandAdmin?
  superAdmin SuperAdmin?
  admin      Admin?
  GrandAdmin GrandAdmin[]

  @@map("permanent_address")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  posts       Post[]
  Project     Project[]

  @@map(name: "categories")
}

model Post {
  id          String   @id @default(uuid())
  title       String
  description String?
  imageUrl    String
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // author    User?   @relation(fields: [authorId], references: [id])
  userId      String
  author      User     @relation(fields: [userId], references: [id])
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])

  @@map(name: "posts")
}

model Project {
  id          String   @id @default(uuid())
  title       String
  description String?
  imageUrl    String
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // author    User?   @relation(fields: [authorId], references: [id])
  userId      String
  author      User     @relation(fields: [userId], references: [id])
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])

  @@map(name: "projects")
}

model Gallery {
  id        String   @id @default(uuid())
  title     String
  eventTime DateTime
  imageUrl  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("gallery")
}

model Membership {
  id              String           @id @default(uuid())
  title           String
  type            SubscriptionType
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  memberShipFeeId String           @unique
  membershipFee   MembershipFee    @relation(fields: [memberShipFeeId], references: [id], onDelete: Cascade)
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription    Subscription[]

  @@map("membership")
}

model MembershipFee {
  id              String      @id @default(uuid())
  registrationFee String      @default("0")
  smartCardFee    String      @default("0")
  membershipFee   String      @default("0")
  totalFee        String      @default("0")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  membership      Membership?

  @@map("membership_fee")
}

model Subscription {
  id                String          @id @default(uuid())
  startTime         DateTime
  endTime           DateTime
  isExpired         Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  membershipId      String
  membership        Membership      @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  memberId          String
  member            Member          @relation(fields: [memberId], references: [userId], onDelete: Cascade)
  subscriptionFeeId String
  subscriptionFee   SubscriptionFee @relation(fields: [subscriptionFeeId], references: [id], onDelete: Cascade)

  @@map("subscription")
}

model SubscriptionFee {
  id              String         @id @default(uuid())
  registrationFee String?        @default("0")
  smartCardFee    String?        @default("0")
  isPaid          Boolean        @default(false)
  transactionId   String
  subscriptionFee String         @default("0")
  totalFee        String         @default("0")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  subscription    Subscription[]

  @@map("subscription_fee")
}

model Village {
  id        String   @id @default(uuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postOfficeId     String
  postOffice       PostOffice         @relation(fields: [postOfficeId], references: [id])
  presentAddress   PresentAddress[]
  permanentAddress PermanentAddress[]

  @@map("villages")
}

model PostOffice {
  id        String   @id @default(uuid())
  name      String   @unique
  postCode  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  thanaId          String
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  thana            Thana              @relation(fields: [thanaId], references: [id])
  villages         Village[]
  presentAddress   PresentAddress[]
  permanentAddress PermanentAddress[]

  @@map("post_offices")
}

model Thana {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  districtId       String
  district         District           @relation(fields: [districtId], references: [id])
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  postOffices      PostOffice[]
  presentAddress   PresentAddress[]
  permanentAddress PermanentAddress[]

  @@map("thana")
}

model District {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  divisionId       String
  division         Division           @relation(fields: [divisionId], references: [id])
  userId           String
  user             User               @relation(fields: [userId], references: [id])
  thana            Thana[]
  presentAddress   PresentAddress[]
  permanentAddress PermanentAddress[]

  @@map("districts")
}

model Division {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId           String
  user             User               @relation(fields: [userId], references: [id])
  countryId        String
  country          Country            @relation(fields: [countryId], references: [id])
  districts        District[]
  presentAddress   PresentAddress[]
  permanentAddress PermanentAddress[]

  @@map("divisions")
}

model Country {
  id     String @id @default(uuid())
  name   String @unique
  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  divisions        Division[]
  presentAddress   PresentAddress[]
  permanentAddress PermanentAddress[]

  @@map("countries")
}

enum SubscriptionType {
  weekly
  monthly
  halfYearly
  yearly
  lifeTime
}

enum Role {
  grand_admin
  super_admin
  admin
  member
}

enum Gender {
  male
  female
  third_gender
  transgender
}

enum RegisteringAddress {
  present
  permanent
}
